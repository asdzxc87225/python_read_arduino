import time
import sys
import serial
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QLineEdit,QPushButton,QVBoxLayout,QWidget

class WorkerThread(QThread):
    finished = pyqtSignal()
    def rum():
        for x in range(10):
            print(x)
            time.sleep(1)



class SerialLoggerGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Serial Data Logger")

        self.serial_port_label = QLabel("Serial Port:")
        self.serial_port_input = QLineEdit("/dev/ttyACM0")

        self.baud_rate_label = QLabel("Baud Rate:")
        self.baud_rate_input = QLineEdit("9600")

        self.start_button = QPushButton("Start Logging")
        self.start_button.clicked.connect(self.start_logging)

        self.stop_button = QPushButton("Stop Logging")
        self.stop_button.clicked.connect(self.stop_logging)
        self.stop_button.setEnabled(False)

        layout = QVBoxLayout()
        layout.addWidget(self.serial_port_label)
        layout.addWidget(self.serial_port_input)
        layout.addWidget(self.baud_rate_label)
        layout.addWidget(self.baud_rate_input)
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.serial_logger = None

    def start_logging(self):
        self.rum = WorkerThread()
        self.rum.rum
    def stop_logging(self):
        print('end')

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = SerialLoggerGUI()
    window.show()
    sys.exit(app.exec_())

